# ============================================================================
# 🚀 CRASH WORM 3D - CI/CD PIPELINE
# ============================================================================
# Ubicación: .github/workflows/ci.yml
# Pipeline completo de integración continua y deployment

name: 🎮 Crash Worm 3D CI/CD

# ========================================
# 🔄 TRIGGERS
# ========================================
on:
  # Push a ramas principales
  push:
    branches: [main, develop, release/*]
    tags: ['v*']
  
  # Pull requests
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  
  # Workflow manual
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      
      skip_tests:
        description: 'Skip tests (emergency deploy only)'
        required: false
        default: false
        type: boolean

# ========================================
# 🌍 VARIABLES GLOBALES
# ========================================
env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BUILD_CACHE_KEY: crash-worm-3d-build
  NODE_CACHE_KEY: crash-worm-3d-node

# ========================================
# 🔒 PERMISOS
# ========================================
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write
  pull-requests: write
  issues: read

# ========================================
# 🏗️ JOBS
# ========================================
jobs:

  # ========================================
  # 🔍 ANÁLISIS INICIAL
  # ========================================
  analyze:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    outputs:
      should-deploy: ${{ steps.changes.outputs.deployable }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Detect Changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend:
              - 'src/**'
              - 'public/**'
              - 'package*.json'
              - 'vite.config.js'
            backend:
              - 'server/**'
            docker:
              - 'Dockerfile*'
              - 'docker-compose*.yml'
            deployable:
              - 'src/**'
              - 'server/**'
              - 'public/**'
              - 'Dockerfile*'
              - 'package*.json'
      
      - name: 🏷️ Extract Version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(node -p "require('./package.json').version")-${GITHUB_SHA::7}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  # ========================================
  # 🧪 TESTING SUITE
  # ========================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    strategy:
      matrix:
        node-version: [18, 20, 21]
        test-suite: [unit, integration, e2e]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 📂 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ env.NODE_CACHE_KEY }}-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.NODE_CACHE_KEY }}-${{ runner.os }}-${{ matrix.node-version }}-
      
      - name: 🔧 Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🧪 Run Unit Tests
        if: matrix.test-suite == 'unit'
        run: |
          npm run test:coverage
          npm run test:security
        env:
          NODE_ENV: test
      
      - name: 🔗 Run Integration Tests
        if: matrix.test-suite == 'integration'
        run: |
          npm run test:integration
          npm run test:api
        env:
          NODE_ENV: test
          CI: true
      
      - name: 🎭 Run E2E Tests
        if: matrix.test-suite == 'e2e'
        run: |
          npm run build
          npm run test:e2e
        env:
          NODE_ENV: test
          CI: true
      
      - name: 📊 Upload Coverage
        if: matrix.test-suite == 'unit' && matrix.node-version == '20'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/lcov.info
          flags: unittests
          name: crash-worm-3d-coverage
      
      - name: 📋 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/
            playwright-report/

  # ========================================
  # 🔍 QUALITY GATE
  # ========================================
  quality:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔧 Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🎨 Linting
        run: |
          npm run lint:ci
          npm run format:check
        continue-on-error: false
      
      - name: 🔒 Security Audit
        run: |
          npm audit --audit-level high
          npm run security:scan
        continue-on-error: false
      
      - name: 📊 SonarCloud Scan
        if: github.actor != 'dependabot[bot]'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: 📋 Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  # ========================================
  # 🏗️ BUILD
  # ========================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [analyze, quality]
    if: always() && (needs.quality.result == 'success' || needs.quality.result == 'skipped')
    
    strategy:
      matrix:
        target: [client, server]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📂 Cache Build
        uses: actions/cache@v3
        with:
          path: |
            dist/
            .vite/
            node_modules/.cache/
          key: ${{ env.BUILD_CACHE_KEY }}-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('src/**', 'package*.json') }}
          restore-keys: |
            ${{ env.BUILD_CACHE_KEY }}-${{ runner.os }}-${{ matrix.target }}-
      
      - name: 🔧 Install Dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🏗️ Build Client
        if: matrix.target == 'client'
        run: |
          npm run build
          npm run build:analyze
        env:
          NODE_ENV: production
          VITE_BUILD_VERSION: ${{ needs.analyze.outputs.version }}
          VITE_COMMIT_HASH: ${{ github.sha }}
          VITE_BUILD_TIME: ${{ github.run_id }}
      
      - name: 🏗️ Build Server
        if: matrix.target == 'server'
        run: |
          cd server
          npm ci --prefer-offline --no-audit
          npm run build
        env:
          NODE_ENV: production
      
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}-${{ needs.analyze.outputs.version }}
          path: |
            dist/
            server/dist/
          retention-days: 7
      
      - name: 📊 Bundle Size Analysis
        if: matrix.target == 'client'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Leer stats del bundle
            const statsPath = path.join(process.cwd(), 'dist', 'stats.json');
            if (fs.existsSync(statsPath)) {
              const stats = JSON.parse(fs.readFileSync(statsPath, 'utf8'));
              
              // Crear comentario con análisis
              const totalSize = stats.assets.reduce((sum, asset) => sum + asset.size, 0);
              const formattedSize = (totalSize / 1024).toFixed(2);
              
              core.summary.addHeading('📦 Bundle Analysis');
              core.summary.addTable([
                ['Metric', 'Value'],
                ['Total Size', `${formattedSize} KB`],
                ['Assets', stats.assets.length.toString()],
                ['Chunks', stats.chunks.length.toString()]
              ]);
              core.summary.write();
            }

  # ========================================
  # 🐳 DOCKER BUILD
  # ========================================
  docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [analyze, build]
    if: needs.analyze.outputs.should-deploy == 'true'
    
    strategy:
      matrix:
        image: [frontend, backend, websocket]
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-client-${{ needs.analyze.outputs.version }}
          path: dist/
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.${{ matrix.image }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ needs.analyze.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.run_id }}
      
      - name: 🔍 Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Security Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ========================================
  # 🚀 DEPLOY STAGING
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [analyze, test, build, docker]
    if: |
      always() &&
      needs.analyze.outputs.should-deploy == 'true' &&
      (github.ref == 'refs/heads/develop' || 
       github.event.inputs.environment == 'staging') &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    environment:
      name: staging
      url: https://staging.crashworm3d.com
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Deployment Tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      
      - name: 🚀 Deploy to Staging
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment with new image
          kubectl set image deployment/crashworm3d-frontend \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} \
            --namespace=staging
          
          kubectl set image deployment/crashworm3d-backend \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} \
            --namespace=staging
          
          # Wait for rollout
          kubectl rollout status deployment/crashworm3d-frontend --namespace=staging --timeout=300s
          kubectl rollout status deployment/crashworm3d-backend --namespace=staging --timeout=300s
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
      
      - name: 🧪 Staging Health Check
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          curl -f https://staging.crashworm3d.com/health || exit 1
          curl -f https://staging.crashworm3d.com/api/health || exit 1
      
      - name: 📝 Update PR Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Staging Deployment Successful!**
              
              🔗 **Links:**
              - [Application](https://staging.crashworm3d.com)
              - [API Health](https://staging.crashworm3d.com/api/health)
              - [Monitoring](https://grafana.staging.crashworm3d.com)
              
              📋 **Details:**
              - Version: ${{ needs.analyze.outputs.version }}
              - Commit: ${context.sha.substring(0, 7)}
              - Build: ${context.runId}`
            })

  # ========================================
  # 🏭 DEPLOY PRODUCTION
  # ========================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [analyze, test, build, docker, deploy-staging]
    if: |
      always() &&
      needs.analyze.outputs.should-deploy == 'true' &&
      (github.ref == 'refs/heads/main' || 
       startsWith(github.ref, 'refs/tags/') ||
       github.event.inputs.environment == 'production') &&
      needs.deploy-staging.result == 'success'
    
    environment:
      name: production
      url: https://crashworm3d.com
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
      
      - name: ✅ Production Pre-checks
        run: |
          echo "Running production pre-deployment checks..."
          
          # Check if this is a proper release
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "✅ Tagged release detected"
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "✅ Main branch deployment"
          elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "✅ Manual production deployment"
          else
            echo "❌ Invalid production deployment trigger"
            exit 1
          fi
      
      - name: 🚀 Deploy to Production
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Blue-Green Deployment Strategy
          kubectl set image deployment/crashworm3d-frontend-green \
            frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }} \
            --namespace=production
          
          kubectl set image deployment/crashworm3d-backend-green \
            backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }} \
            --namespace=production
          
          # Wait for green deployment
          kubectl rollout status deployment/crashworm3d-frontend-green --namespace=production --timeout=600s
          kubectl rollout status deployment/crashworm3d-backend-green --namespace=production --timeout=600s
          
          # Switch traffic to green
          kubectl patch service crashworm3d-frontend-service -p '{"spec":{"selector":{"version":"green"}}}' --namespace=production
          kubectl patch service crashworm3d-backend-service -p '{"spec":{"selector":{"version":"green"}}}' --namespace=production
          
          # Scale down blue deployment
          kubectl scale deployment crashworm3d-frontend-blue --replicas=0 --namespace=production
          kubectl scale deployment crashworm3d-backend-blue --replicas=0 --namespace=production
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
      
      - name: 🏥 Production Health Check
        run: |
          # Comprehensive health checks
          sleep 60
          
          # Basic health
          curl -f https://crashworm3d.com/health || exit 1
          curl -f https://crashworm3d.com/api/health || exit 1
          
          # Game-specific checks
          curl -f https://crashworm3d.com/api/status || exit 1
          
          # Performance check
          response_time=$(curl -o /dev/null -s -w '%{time_total}' https://crashworm3d.com)
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "❌ Response time too slow: ${response_time}s"
            exit 1
          fi
          
          echo "✅ All health checks passed"
      
      - name: 📢 Notify Success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            // Create GitHub release if tagged
            if (context.ref.startsWith('refs/tags/')) {
              const tag = context.ref.replace('refs/tags/', '');
              
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tag,
                name: `🎮 Crash Worm 3D ${tag}`,
                body: `🚀 **Production Release ${tag}**
                
                **What's New:**
                - Deployed from commit ${context.sha.substring(0, 7)}
                - Build ID: ${context.runId}
                - Deployment time: ${new Date().toISOString()}
                
                **Links:**
                - [🎮 Play Game](https://crashworm3d.com)
                - [📖 Documentation](https://docs.crashworm3d.com)
                - [📊 Monitoring](https://status.crashworm3d.com)`,
                draft: false,
                prerelease: tag.includes('beta') || tag.includes('alpha')
              });
            }

  # ========================================
  # 🧹 CLEANUP
  # ========================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 🗑️ Clean up old artifacts
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact => {
                const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
                return ageInDays > 7;
              });
            
            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
            
            console.log(`Cleaned up ${oldArtifacts.length} old artifacts`);

# ========================================
# 📊 WORKFLOW SUMMARY
# ========================================
# Este workflow incluye:
# - ✅ Análisis de código y detección de cambios
# - 🧪 Suite completa de testing (unit, integration, e2e)
# - 🔍 Quality gates (linting, security, formatting)
# - 🏗️ Build optimizado con cache
# - 🐳 Build de imágenes Docker multi-arquitectura
# - 🔒 Escaneo de seguridad de imágenes
# - 🚀 Deploy automático a staging y production
# - 💙 Blue-green deployment strategy
# - 🏥 Health checks comprensivos
# - 📢 Notificaciones y releases automáticas
# - 🧹 Cleanup automático de artifacts